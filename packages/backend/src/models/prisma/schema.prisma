datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

generator client {
  provider = "prisma-client-js"
  // output   = "../../node_modules/.prisma/client"
  output   = "../../../../../node_modules/.prisma/client"
}

model Employee {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String   @unique
  password  String
  clients   Client[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Client {
  id             Int      @id @default(autoincrement())
  employeeId     Int
  employee       Employee @relation(fields: [employeeId], references: [id])
  companyName    String
  tradeName      String
  taxpayerId     String   @unique
  type           String
  buyerFirstName String
  buyerLastName  String
  phone          String
  address        String
  number         String
  complement     String
  zipCode        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  Orders         Orders[]
  active         Boolean  @default(true)
}

model Products {
  id                     Int                      @id @default(autoincrement())
  name                   String
  price                  Int
  category               String
  type                   String
  HistoricalProductPrice HistoricalProductPrice[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  OrderItems             OrderItems[]

  @@index([category], type: BTree)
}

model HistoricalProductPrice {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Orders {
  id                  Int          @id @default(autoincrement())
  clientId            Int
  client              Client       @relation(fields: [clientId], references: [id])
  status              String // CREATED - SENT - IN-PREPARATION - IN-TRANSIT - DELIVERED
  estimatedOrderPrice Int
  orderTotalPrice     Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt
  OrderItems          OrderItems[]
}

model OrderItems {
  id                         Int      @id @default(autoincrement())
  orderId                    Int
  order                      Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId                  Int
  products                   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  tablePrice                 Int
  negotiatedPrice            Int
  orderedWeightInGrams       Int
  deliveredWeightInGrams     Int?
  estimatedProductTotalPrice Int
  productTotalPrice          Int?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now()) @updatedAt
}
